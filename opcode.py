NOP       = 0x00 # pass
ICONST_M1 = 0x02 # push -1 onto stack
ICONST_0  = 0x03 # push 0 onto stack
ICONST_1  = 0x04 # push 1 onto stack
ICONST_2  = 0x05 # push 2 onto stack
ICONST_3  = 0x06 # push 3 onto stack
ICONST_4  = 0x07 # push 4 onto stack
ICONST_5  = 0x08 # push 5 onto stack
ICONST    = 0x09 # push next 8 bytes onto stack as integer constant
DCONST_M1 = 0x0A # push -1.0 onto stack
DCONST_0  = 0x0B # push 0.0 onto stack
DCONST_1  = 0x0C # push 1.0 onto stack
DCONST_2  = 0x0D # push 2.0 onto stack
DCONST    = 0x0F # push next 8 bytes onto st4ack as float constant
NCONST    = 0x20 # push literal nil onto stack
BCONST_F  = 0x21 # push literal false onto stack
BCONST_T  = 0x22 # push literal true onto stack
DUP       = 0x58 # duplicate top value of stack
ADD       = 0x60 # add two integers
SUB       = 0x61 # subtract two integers
MUL       = 0x62 # multiply two integers
DIV       = 0x64 # divide two integers
AND       = 0x6E # and, short circuits
OR        = 0x6F # or, short circuits
NEG       = 0x70 # negate an integer
NOT       = 0x71 # negate a boolean
LT        = 0x72 # less than
LE        = 0x73 # less than or equal
GT        = 0x74 # greater than
GE        = 0x75 # greater than or equal
EQ        = 0x76 # equality
NEQ       = 0x77 # inequality
I2D       = 0x80 # integer to double
D2I       = 0x82 # double to integer
BR_1      = 0x90 # branch unconditionally (takes next 1 byte as jump length)
BR_2      = 0x91 # branch unconditionally (takes next 2 bytes as jump length)
BR_3      = 0x92 # branch unconditionally (takes next 3 bytes as jump length)
BR_4      = 0x93 # branch unconditionally (takes next 4 bytes as jump length)
BR_8      = 0x94 # branch unconditionally (takes next 8 bytes as jump length)
BRF_1     = 0x95 # branch if condition is falsey (takes next 1 bytes as jump length)
BRF_2     = 0x96 # branch if condition is falsey (takes next 2 bytes as jump length)
BRF_3     = 0x97 # branch if condition is falsey (takes next 3 bytes as jump length)
BRF_4     = 0x98 # branch if condition is falsey (takes next 4 bytes as jump length)
BRF_8     = 0x99 # branch if condition is falsey (takes next 8 bytes as jump length)
BRT_1     = 0x9A # branch if condition is truthy (takes next 1 bytes as jump length)
BRT_2     = 0x9B # branch if condition is truthy (takes next 2 bytes as jump length)
BRT_3     = 0x9C # branch if condition is truthy (takes next 3 bytes as jump length)
BRT_4     = 0x9D # branch if condition is truthy (takes next 4 bytes as jump length)
BRT_8     = 0x9E # branch if condition is truthy (takes next 8 bytes as jump length)
HALT      = 0xF0 # halt
POP       = 0xF1 # pop top of stack
PRINT     = 0xF2 # print top of stack (temporary to allow debugging)
GSTORE    = 0xF4 # store top of stack at addr provided
LSTORE    = 0xF5 # store top of stack as local at addr
GLOAD     = 0xF6 # load global from addr
LLOAD     = 0xF7 # load local from addr